name: ASP.NET Core Jenkins Kubernetes DockerHub Screenshots
on:
#  push:
  repository_dispatch:
  schedule:
    - cron:  '0 0 23 * *'
jobs:
  build:
    if: >-
      (github.event_name != 'repository_dispatch') ||
      (github.event.client_payload.workflow == github.workflow) ||
      (github.event.client_payload.workflow == 'all') ||
      (github.event.client_payload.workflow == 'jenkins-aspnetcore-k8s-screenshots')
    runs-on: ubuntu-latest
    env:
      SLACK_STEP_HANDLER: true
      SLACK_ON_ERROR_ONLY: true
      STEP_PAUSE: 1000
      SLACK_HOOK_URL: ${{ secrets.SLACK_PRIVATE_HOOK_URL_1 }}
      SMTP_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      WISTIA_USERNAME: ${{ secrets.WISTIA_USERNAME }}
      WISTIA_PASSWORD: ${{ secrets.WISTIA_PASSWORD }}
      MEDIA_PATH: /tmp/screenshots
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      SCREENSHOT_BUCKET: octopus-guides-screenshots
      DISPLAY: ":99.0"
      MOUSE_VERTICAL_OFFSET: 74
      MOUSE_VERTICAL_OFFSET_CHROME: 125
      CUCUMBER_TAGS: >-
        (not @browserspecific or @firefox) and
        (not @destinationspecific or @k8s) and
        (not @repositoryspecific or @dockerhub) and
        (not @applicationspecific or @aspnetcore) and
        (not @sourcespecific or @git)
      DISABLE_HIGHLIGHTS: false
      DISABLE_SCREENSHOTS: false
      MOVE_TO_MOUSE_CUSROR: false
      DISABLE_VIDEO: true
      STHREE_SCREENSHOT_ENABLED: true
      GIT_URL: https://github.com/OctopusSamples/RandomQuotes.git
      WISTIA_MEDIA_ID:
      SCREENSHOT_PATH: /aspnetcore-app/k8s/dockerhub/git/
      DOCKER_IMAGE: octopusdeploy/randomquotes
      CONFIG_FILE: "{\\n  \\\"Logging\\\": {\\n    \\\"IncludeScopes\\\": false,\\n    \\\"LogLevel\\\": {\\n      \\\"Default\\\": \\\"Warning\\\"\\n    }\\n  },\\n  \\\"AppSettings\\\": {\\n    \\\"AppVersion\\\": \\\"0.0.0\\\",\\n    \\\"EnvironmentName\\\": \\\"#{Octopus.Environment.Name}\\\"\\n  }\\n}"
      CONFIG_FILE_MOUNT_PATH: "/app/appsettings.json"
      CONFIG_FILE_NAME: "appsettings.json"
      CREATE_RELEASE_SHELL_LOCATOR: "(//div[@class='CodeMirror'])[2]"
      DOCKER_PORT: 80
    steps:
      - uses: actions/checkout@v1

      - name: Install Puppet
        run: ./install.sh utilities.pp jenkins.pp minikube.pp dockercreds.pp octopus.pp dotnetutilities.pp octopuscli.pp jenkinsfinalize.pp
        env:
          FACTER_dockerhub_user: ${{ secrets.DOCKERHUB_USER }}
          FACTER_dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Wait for Octopus
        run: ./scripts/linux/wait-octopus.sh

      - name: Create Api Key
        run: ./scripts/linux/create-apikey.sh

      - name: Create Jenkins project
        run: ./scripts/linux/create-jenkinsproject.sh

      - name: Create Worker
        run: sudo ./scripts/linux/create-worker.sh

      - name: Create environments
        run: ./scripts/linux/create-environments.sh

      - name: Create certificates
        run: ./scripts/linux/create-certificates.sh

      - name: Create target
        run: ./scripts/linux/create-k8starget-screenshots.sh

      - name: Create docker feed
        run: ./scripts/linux/create-dockerfeed.sh

      - name: Create project
        run: ./scripts/linux/create-k8sproject.sh

      - name: Open App in Dev
        run: ./scripts/linux/open-devwebapp.sh

      - name: Create release
        run: ./scripts/linux/create-jenkinscreaterelease.sh

      - name: Create Lifecycle
        run: ./scripts/linux/create-lifecycle.sh

      - name: Open App in Test
        run: ./scripts/linux/open-testwebapp.sh

      - name: Add Manual Intervention
        run: ./scripts/linux/add-manualintervention.sh

      - name: Add Notification
        run: ./scripts/linux/add-notification.sh

      - name: Upload screenshots
        run: ./scripts/linux/upload-screenshots.sh